from collections.abc import Mapping, Sequence
import enum
from typing import overload


class Odometry:
    @overload
    @staticmethod
    def create() -> None: ...

    @overload
    @staticmethod
    def create(arg: OdometryType, /) -> None: ...

    @overload
    def process(self, arg0: "rtabmap::SensorData", arg1: OdometryInfo, /) -> "rtabmap::Transform": ...

    @overload
    def process(self, arg0: "rtabmap::SensorData", arg1: "rtabmap::Transform", arg2: OdometryInfo, /) -> "rtabmap::Transform": ...

    def reset(self, arg: "rtabmap::Transform", /) -> None: ...

    def getType(self) -> OdometryType: ...

    def canProcessRawImages(self) -> bool: ...

    def canProcessAsyncIMU(self) -> bool: ...

    def getPose(self) -> "rtabmap::Transform": ...

    def isInfoDataFilled(self) -> bool: ...

    def getVelocityGuess(self) -> "rtabmap::Transform": ...

    def previousStamp(self) -> float: ...

    def framesProcessed(self) -> int: ...

    def imagesAlreadyRectified(self) -> bool: ...

class OdometryInfo:
    def __init__(self) -> None: ...

    def statistics(self, arg: "rtabmap::Transform", /) -> dict[str, float]: ...

    @property
    def lost(self) -> bool: ...

    @lost.setter
    def lost(self, arg: bool, /) -> None: ...

    @property
    def reg(self) -> "rtabmap::RegistrationInfo": ...

    @reg.setter
    def reg(self, arg: "rtabmap::RegistrationInfo", /) -> None: ...

    @property
    def features(self) -> int: ...

    @features.setter
    def features(self, arg: int, /) -> None: ...

    @property
    def localMapSize(self) -> int: ...

    @localMapSize.setter
    def localMapSize(self, arg: int, /) -> None: ...

    @property
    def localScanMapSize(self) -> int: ...

    @localScanMapSize.setter
    def localScanMapSize(self, arg: int, /) -> None: ...

    @property
    def localKeyFrames(self) -> int: ...

    @localKeyFrames.setter
    def localKeyFrames(self, arg: int, /) -> None: ...

    @property
    def localBundleOutliers(self) -> int: ...

    @localBundleOutliers.setter
    def localBundleOutliers(self, arg: int, /) -> None: ...

    @property
    def localBundleConstraints(self) -> int: ...

    @localBundleConstraints.setter
    def localBundleConstraints(self, arg: int, /) -> None: ...

    @property
    def localBundleTime(self) -> float: ...

    @localBundleTime.setter
    def localBundleTime(self, arg: float, /) -> None: ...

    @property
    def localBundlePoses(self) -> dict[int, "rtabmap::Transform"]: ...

    @localBundlePoses.setter
    def localBundlePoses(self, arg: Mapping[int, "rtabmap::Transform"], /) -> None: ...

    @property
    def localBundleModels(self) -> dict[int, list["rtabmap::CameraModel"]]: ...

    @localBundleModels.setter
    def localBundleModels(self, arg: Mapping[int, Sequence["rtabmap::CameraModel"]], /) -> None: ...

    @property
    def localBundleAvgInlierDistance(self) -> float: ...

    @localBundleAvgInlierDistance.setter
    def localBundleAvgInlierDistance(self, arg: float, /) -> None: ...

    @property
    def localBundleMaxKeyFramesForInlier(self) -> int: ...

    @localBundleMaxKeyFramesForInlier.setter
    def localBundleMaxKeyFramesForInlier(self, arg: int, /) -> None: ...

    @property
    def localBundleOutliersPerCam(self) -> list[int]: ...

    @localBundleOutliersPerCam.setter
    def localBundleOutliersPerCam(self, arg: Sequence[int], /) -> None: ...

    @property
    def keyFrameAdded(self) -> bool: ...

    @keyFrameAdded.setter
    def keyFrameAdded(self, arg: bool, /) -> None: ...

    @property
    def timeDeskewing(self) -> float: ...

    @timeDeskewing.setter
    def timeDeskewing(self, arg: float, /) -> None: ...

    @property
    def timeEstimation(self) -> float: ...

    @timeEstimation.setter
    def timeEstimation(self, arg: float, /) -> None: ...

    @property
    def timeParticleFiltering(self) -> float: ...

    @timeParticleFiltering.setter
    def timeParticleFiltering(self, arg: float, /) -> None: ...

    @property
    def stamp(self) -> float: ...

    @stamp.setter
    def stamp(self, arg: float, /) -> None: ...

    @property
    def interval(self) -> float: ...

    @interval.setter
    def interval(self, arg: float, /) -> None: ...

    @property
    def transform(self) -> "rtabmap::Transform": ...

    @transform.setter
    def transform(self, arg: "rtabmap::Transform", /) -> None: ...

    @property
    def transformFiltered(self) -> "rtabmap::Transform": ...

    @transformFiltered.setter
    def transformFiltered(self, arg: "rtabmap::Transform", /) -> None: ...

    @property
    def transformGroundTruth(self) -> "rtabmap::Transform": ...

    @transformGroundTruth.setter
    def transformGroundTruth(self, arg: "rtabmap::Transform", /) -> None: ...

    @property
    def guessVelocity(self) -> "rtabmap::Transform": ...

    @guessVelocity.setter
    def guessVelocity(self, arg: "rtabmap::Transform", /) -> None: ...

    @property
    def guess(self) -> "rtabmap::Transform": ...

    @guess.setter
    def guess(self, arg: "rtabmap::Transform", /) -> None: ...

    @property
    def distanceTravelled(self) -> float: ...

    @distanceTravelled.setter
    def distanceTravelled(self, arg: float, /) -> None: ...

    @property
    def memoryUsage(self) -> int: ...

    @memoryUsage.setter
    def memoryUsage(self, arg: int, /) -> None: ...

    @property
    def gravityRollError(self) -> float: ...

    @gravityRollError.setter
    def gravityRollError(self, arg: float, /) -> None: ...

    @property
    def gravityPitchError(self) -> float: ...

    @gravityPitchError.setter
    def gravityPitchError(self, arg: float, /) -> None: ...

    @property
    def type(self) -> int: ...

    @type.setter
    def type(self, arg: int, /) -> None: ...

    @property
    def words(self) -> "std::__1::multimap<int, cv::KeyPoint, std::__1::less<int>, std::__1::allocator<std::__1::pair<int const, cv::KeyPoint>>>": ...

    @words.setter
    def words(self, arg: "std::__1::multimap<int, cv::KeyPoint, std::__1::less<int>, std::__1::allocator<std::__1::pair<int const, cv::KeyPoint>>>", /) -> None: ...

    @property
    def localMap(self) -> dict[int, "cv::Point3_<float>"]: ...

    @localMap.setter
    def localMap(self, arg: Mapping[int, "cv::Point3_<float>"], /) -> None: ...

    @property
    def localScanMap(self) -> "rtabmap::LaserScan": ...

    @localScanMap.setter
    def localScanMap(self, arg: "rtabmap::LaserScan", /) -> None: ...

    @property
    def refCorners(self) -> list["cv::Point_<float>"]: ...

    @refCorners.setter
    def refCorners(self, arg: Sequence["cv::Point_<float>"], /) -> None: ...

    @property
    def newCorners(self) -> list["cv::Point_<float>"]: ...

    @newCorners.setter
    def newCorners(self, arg: Sequence["cv::Point_<float>"], /) -> None: ...

    @property
    def cornerInliers(self) -> list[int]: ...

    @cornerInliers.setter
    def cornerInliers(self, arg: Sequence[int], /) -> None: ...

class OdometryType(enum.Enum):
    kTypeUndef = -1

    kTypeF2M = 0

    kTypeF2F = 1

    kTypeFovis = 2

    kTypeViso2 = 3

    kTypeDVO = 4

    kTypeORBSLAM = 5

    kTypeOkvis = 6

    kTypeLOAM = 7

    kTypeMSCKF = 8

    kTypeVINSFusion = 9

    kTypeOpenVINS = 10

    kTypeFLOAM = 11

    kTypeOpen3D = 12

def add(a: int, b: int) -> int: ...
