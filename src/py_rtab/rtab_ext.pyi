from collections.abc import Mapping, Sequence
import enum
from typing import overload

import numpy


class CameraModel:
    @overload
    def __init__(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: Transform, arg5: float, arg6: "cv::Size_<int>", /) -> None: ...

    @overload
    def __init__(self, arg0: str, arg1: float, arg2: float, arg3: float, arg4: float, arg5: Transform, arg6: float, arg7: "cv::Size_<int>", /) -> None: ...

    @staticmethod
    def opticalRotation() -> Transform: ...

    def initRectificationMap(self) -> bool: ...

    def isRectificationMapInitialized(self) -> bool: ...

    def isValidForProjection(self) -> bool: ...

    def isValidForReprojection(self) -> bool: ...

    def isValidForRectification(self) -> bool: ...

    def setName(self, arg: str, /) -> None: ...

    def name(self) -> str: ...

    def fx(self) -> float: ...

    def fy(self) -> float: ...

    def cx(self) -> float: ...

    def cy(self) -> float: ...

    def Tx(self) -> float: ...

    def setLocalTransform(self, arg: Transform, /) -> None: ...

    def localTransform(self) -> Transform: ...

    def setImageSize(self, arg: "cv::Size_<int>", /) -> None: ...

    def imageSize(self) -> "cv::Size_<int>": ...

    def imageWidth(self) -> int: ...

    def imageHeight(self) -> int: ...

    def fovX(self) -> float: ...

    def fovY(self) -> float: ...

    def horizontalFOV(self) -> float: ...

    def verticalFOV(self) -> float: ...

    def isFisheye(self) -> bool: ...

    @overload
    def load(self, arg: str, /) -> bool: ...

    @overload
    def load(self, arg0: str, arg1: str, /) -> bool: ...

    def save(self, arg: str, /) -> bool: ...

    def serialize(self) -> list[int]: ...

    def deserialize(self, arg: Sequence[int], /) -> int: ...

    def scaled(self, arg: float, /) -> CameraModel: ...

    def roi(self, arg: "cv::Rect_<int>", /) -> CameraModel: ...

    def project(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, /) -> None: ...

    def inFrame(self, arg0: int, arg1: int, /) -> bool: ...

class EnvSensor:
    @overload
    def __init__(self) -> None: ...

    @overload
    def __init__(self, type: EnvSensorType, value: float, stamp: float = 0) -> None: ...

    def type(self) -> EnvSensorType: ...

    def value(self) -> float: ...

    def stamp(self) -> float: ...

class EnvSensorType(enum.Enum):
    kUndefined = 0

    kWifiSignalStrength = 1

    kAmbientTemperature = 2

    kAmbientAirPressure = 3

    kAmbientLight = 4

    kAmbientRelativeHumidity = 5

    kCustomSensor1 = 100

    kCustomSensor2 = 101

    kCustomSensor3 = 102

    kCustomSensor4 = 103

    kCustomSensor5 = 104

    kCustomSensor6 = 105

    kCustomSensor7 = 106

    kCustomSensor8 = 107

    kCustomSensor9 = 108

class GPS:
    @overload
    def __init__(self) -> None: ...

    @overload
    def __init__(self, stamp: float, longitude: float, latitude: float, altitude: float, error: float, bearing: float) -> None: ...

    def stamp(self) -> float: ...

    def longitude(self) -> float: ...

    def latitude(self) -> float: ...

    def altitude(self) -> float: ...

    def error(self) -> float: ...

    def bearing(self) -> float: ...

    def toGeodeticCoords(self) -> GeodeticCoords: ...

class GeodeticCoords:
    @overload
    def __init__(self) -> None: ...

    @overload
    def __init__(self, latitude: float, longitude: float, altitude: float) -> None: ...

    def latitude(self) -> float: ...

    def longitude(self) -> float: ...

    def altitude(self) -> float: ...

    def setLatitude(self, arg: float, /) -> None: ...

    def setLongitude(self, arg: float, /) -> None: ...

    def setAltitude(self, arg: float, /) -> None: ...

    def toGeocentric_WGS84(self) -> tuple: ...

    def toENU_WGS84(self, arg: GeodeticCoords, /) -> tuple: ...

    def fromGeocentric_WGS84(self, arg: tuple, /) -> None: ...

    def fromENU_WGS84(self, arg0: tuple, arg1: GeodeticCoords, /) -> None: ...

class GlobalDescriptor:
    @overload
    def __init__(self) -> None: ...

    @overload
    def __init__(self, type: int, data: numpy.array, info: numpy.array) -> None: ...

    def type(self) -> int: ...

    def info(self) -> numpy.array: ...

    def data(self) -> numpy.array: ...

class IMU:
    @overload
    def __init__(self, orientation: list, orientationCovariance: numpy.array, angularVelocity: list, angularVelocityCovariance: numpy.array, linearAcceleration: list, linearAccelerationCovariance: numpy.array) -> None: ...

    @overload
    def __init__(self, angularVelocity: list, angularVelocityCovariance: numpy.array, linearAcceleration: list, linearAccelerationCovariance: numpy.array) -> None: ...

    def orientation(self) -> list: ...

    def orientationCovariance(self) -> numpy.array: ...

    def angularVelocity(self) -> list: ...

    def angularVelocityCovariance(self) -> numpy.array: ...

    def linearAcceleration(self) -> list: ...

    def linearAccelerationCovariance(self) -> numpy.array: ...

    def localTransform(self) -> Transform: ...

    def convertToBaseFrame(self) -> None: ...

    def empty(self) -> bool: ...

class Landmark:
    @overload
    def __init__(self) -> None: ...

    @overload
    def __init__(self, id: int, size: float, pose: Transform, covariance: numpy.array) -> None: ...

    def id(self) -> int: ...

    def size(self) -> float: ...

    def pose(self) -> Transform: ...

    def covariance(self) -> numpy.array: ...

class LaserScan:
    @overload
    def __init__(self) -> None: ...

    @overload
    def __init__(self, arg0: LaserScan, arg1: int, arg2: float, /) -> None: ...

    @overload
    def __init__(self, arg0: numpy.array, arg1: int, arg2: float, arg3: LaserScanFormat, /) -> None: ...

    @overload
    def __init__(self, arg0: LaserScan, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, /) -> None: ...

    @overload
    def __init__(self, arg0: numpy.array, arg1: LaserScanFormat, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, /) -> None: ...

    @staticmethod
    def isScan2d(arg: LaserScanFormat, /) -> bool: ...

    @staticmethod
    def isScanHasNormals(arg: LaserScanFormat, /) -> bool: ...

    @staticmethod
    def isScanHasRGB(arg: LaserScanFormat, /) -> bool: ...

    @staticmethod
    def isScanHasIntensity(arg: LaserScanFormat, /) -> bool: ...

    @staticmethod
    def isScanHasTime(arg: LaserScanFormat, /) -> bool: ...

    @overload
    @staticmethod
    def backwardCompatibility(arg0: numpy.array, arg1: int, arg2: int, /) -> LaserScan: ...

    @overload
    @staticmethod
    def backwardCompatibility(arg0: numpy.array, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, /) -> LaserScan: ...

    @overload
    def clone(self) -> LaserScan: ...

    @overload
    def clone(self) -> LaserScan: ...

    def data(self) -> numpy.array: ...

    def format(self) -> LaserScanFormat: ...

    def formatName(self) -> str: ...

    def channels(self) -> int: ...

    def maxPoints(self) -> int: ...

    def rangeMin(self) -> float: ...

    def rangeMax(self) -> float: ...

    def angleMin(self) -> float: ...

    def angleMax(self) -> float: ...

    def angleIncrement(self) -> float: ...

    def setLocalTransform(self, arg: Transform, /) -> None: ...

    def localTransform(self) -> Transform: ...

    def empty(self) -> bool: ...

    def isEmpty(self) -> bool: ...

    def size(self) -> int: ...

    def dataType(self) -> int: ...

    def is2d(self) -> bool: ...

    def hasNormals(self) -> bool: ...

    def hasRGB(self) -> bool: ...

    def hasIntensity(self) -> bool: ...

    def hasTime(self) -> bool: ...

    def isCompressed(self) -> bool: ...

    def isOrganized(self) -> bool: ...

    def densify(self) -> LaserScan: ...

    def getIntensityOffset(self) -> int: ...

    def getRGBOffset(self) -> int: ...

    def getNormalsOffset(self) -> int: ...

    def getTimeOffset(self) -> int: ...

    def field(self, arg0: int, arg1: int, /) -> float: ...

    def clear(self) -> None: ...

class LaserScanFormat(enum.Enum):
    kUnknown = 0

    kXY = 1

    kXYI = 2

    kXYNormal = 3

    kXYINormal = 4

    kXYZ = 5

    kXYZI = 6

    kXYZRGB = 7

    kXYZNormal = 8

    kXYZINormal = 9

    kXYZRGBNormal = 10

    kXYZIT = 11

class Odometry:
    @overload
    @staticmethod
    def create() -> None: ...

    @overload
    @staticmethod
    def create(arg: OdometryType, /) -> None: ...

    @overload
    def process(self, arg0: SensorData, arg1: OdometryInfo, /) -> Transform: ...

    @overload
    def process(self, arg0: SensorData, arg1: Transform, arg2: OdometryInfo, /) -> Transform: ...

    def reset(self, arg: Transform, /) -> None: ...

    def getType(self) -> OdometryType: ...

    def canProcessRawImages(self) -> bool: ...

    def canProcessAsyncIMU(self) -> bool: ...

    def getPose(self) -> Transform: ...

    def isInfoDataFilled(self) -> bool: ...

    def getVelocityGuess(self) -> Transform: ...

    def previousStamp(self) -> float: ...

    def framesProcessed(self) -> int: ...

    def imagesAlreadyRectified(self) -> bool: ...

class OdometryInfo:
    def __init__(self) -> None: ...

    def statistics(self, arg: Transform, /) -> dict[str, float]: ...

    @property
    def lost(self) -> bool: ...

    @lost.setter
    def lost(self, arg: bool, /) -> None: ...

    @property
    def reg(self) -> RegistrationInfo: ...

    @reg.setter
    def reg(self, arg: RegistrationInfo, /) -> None: ...

    @property
    def features(self) -> int: ...

    @features.setter
    def features(self, arg: int, /) -> None: ...

    @property
    def localMapSize(self) -> int: ...

    @localMapSize.setter
    def localMapSize(self, arg: int, /) -> None: ...

    @property
    def localScanMapSize(self) -> int: ...

    @localScanMapSize.setter
    def localScanMapSize(self, arg: int, /) -> None: ...

    @property
    def localKeyFrames(self) -> int: ...

    @localKeyFrames.setter
    def localKeyFrames(self, arg: int, /) -> None: ...

    @property
    def localBundleOutliers(self) -> int: ...

    @localBundleOutliers.setter
    def localBundleOutliers(self, arg: int, /) -> None: ...

    @property
    def localBundleConstraints(self) -> int: ...

    @localBundleConstraints.setter
    def localBundleConstraints(self, arg: int, /) -> None: ...

    @property
    def localBundleTime(self) -> float: ...

    @localBundleTime.setter
    def localBundleTime(self, arg: float, /) -> None: ...

    @property
    def localBundlePoses(self) -> dict[int, Transform]: ...

    @localBundlePoses.setter
    def localBundlePoses(self, arg: Mapping[int, Transform], /) -> None: ...

    @property
    def localBundleModels(self) -> dict[int, list[CameraModel]]: ...

    @localBundleModels.setter
    def localBundleModels(self, arg: Mapping[int, Sequence[CameraModel]], /) -> None: ...

    @property
    def localBundleAvgInlierDistance(self) -> float: ...

    @localBundleAvgInlierDistance.setter
    def localBundleAvgInlierDistance(self, arg: float, /) -> None: ...

    @property
    def localBundleMaxKeyFramesForInlier(self) -> int: ...

    @localBundleMaxKeyFramesForInlier.setter
    def localBundleMaxKeyFramesForInlier(self, arg: int, /) -> None: ...

    @property
    def localBundleOutliersPerCam(self) -> list[int]: ...

    @localBundleOutliersPerCam.setter
    def localBundleOutliersPerCam(self, arg: Sequence[int], /) -> None: ...

    @property
    def keyFrameAdded(self) -> bool: ...

    @keyFrameAdded.setter
    def keyFrameAdded(self, arg: bool, /) -> None: ...

    @property
    def timeDeskewing(self) -> float: ...

    @timeDeskewing.setter
    def timeDeskewing(self, arg: float, /) -> None: ...

    @property
    def timeEstimation(self) -> float: ...

    @timeEstimation.setter
    def timeEstimation(self, arg: float, /) -> None: ...

    @property
    def timeParticleFiltering(self) -> float: ...

    @timeParticleFiltering.setter
    def timeParticleFiltering(self, arg: float, /) -> None: ...

    @property
    def stamp(self) -> float: ...

    @stamp.setter
    def stamp(self, arg: float, /) -> None: ...

    @property
    def interval(self) -> float: ...

    @interval.setter
    def interval(self, arg: float, /) -> None: ...

    @property
    def transform(self) -> Transform: ...

    @transform.setter
    def transform(self, arg: Transform, /) -> None: ...

    @property
    def transformFiltered(self) -> Transform: ...

    @transformFiltered.setter
    def transformFiltered(self, arg: Transform, /) -> None: ...

    @property
    def transformGroundTruth(self) -> Transform: ...

    @transformGroundTruth.setter
    def transformGroundTruth(self, arg: Transform, /) -> None: ...

    @property
    def guessVelocity(self) -> Transform: ...

    @guessVelocity.setter
    def guessVelocity(self, arg: Transform, /) -> None: ...

    @property
    def guess(self) -> Transform: ...

    @guess.setter
    def guess(self, arg: Transform, /) -> None: ...

    @property
    def distanceTravelled(self) -> float: ...

    @distanceTravelled.setter
    def distanceTravelled(self, arg: float, /) -> None: ...

    @property
    def memoryUsage(self) -> int: ...

    @memoryUsage.setter
    def memoryUsage(self, arg: int, /) -> None: ...

    @property
    def gravityRollError(self) -> float: ...

    @gravityRollError.setter
    def gravityRollError(self, arg: float, /) -> None: ...

    @property
    def gravityPitchError(self) -> float: ...

    @gravityPitchError.setter
    def gravityPitchError(self, arg: float, /) -> None: ...

    @property
    def type(self) -> int: ...

    @type.setter
    def type(self, arg: int, /) -> None: ...

    @property
    def localMap(self) -> dict[int, tuple]: ...

    @localMap.setter
    def localMap(self, arg: Mapping[int, tuple], /) -> None: ...

    @property
    def localScanMap(self) -> LaserScan: ...

    @localScanMap.setter
    def localScanMap(self, arg: LaserScan, /) -> None: ...

    @property
    def refCorners(self) -> list[tuple]: ...

    @refCorners.setter
    def refCorners(self, arg: Sequence[tuple], /) -> None: ...

    @property
    def newCorners(self) -> list[tuple]: ...

    @newCorners.setter
    def newCorners(self, arg: Sequence[tuple], /) -> None: ...

    @property
    def cornerInliers(self) -> list[int]: ...

    @cornerInliers.setter
    def cornerInliers(self, arg: Sequence[int], /) -> None: ...

class OdometryType(enum.Enum):
    kTypeUndef = -1

    kTypeF2M = 0

    kTypeF2F = 1

    kTypeFovis = 2

    kTypeViso2 = 3

    kTypeDVO = 4

    kTypeORBSLAM = 5

    kTypeOkvis = 6

    kTypeLOAM = 7

    kTypeMSCKF = 8

    kTypeVINSFusion = 9

    kTypeOpenVINS = 10

    kTypeFLOAM = 11

    kTypeOpen3D = 12

class RegistrationInfo:
    def __init__(self) -> None: ...

    def copyWithoutData(self) -> RegistrationInfo: ...

    @property
    def covariance(self) -> numpy.array: ...

    @covariance.setter
    def covariance(self, arg: numpy.array, /) -> None: ...

    @property
    def rejectedMsg(self) -> str: ...

    @rejectedMsg.setter
    def rejectedMsg(self, arg: str, /) -> None: ...

    @property
    def totalTime(self) -> float: ...

    @totalTime.setter
    def totalTime(self, arg: float, /) -> None: ...

    @property
    def inliers(self) -> int: ...

    @inliers.setter
    def inliers(self, arg: int, /) -> None: ...

    @property
    def inliersRatio(self) -> float: ...

    @inliersRatio.setter
    def inliersRatio(self, arg: float, /) -> None: ...

    @property
    def inliersMeanDistance(self) -> float: ...

    @inliersMeanDistance.setter
    def inliersMeanDistance(self, arg: float, /) -> None: ...

    @property
    def inliersDistribution(self) -> float: ...

    @inliersDistribution.setter
    def inliersDistribution(self, arg: float, /) -> None: ...

    @property
    def inliersIDs(self) -> list[int]: ...

    @inliersIDs.setter
    def inliersIDs(self, arg: Sequence[int], /) -> None: ...

    @property
    def matches(self) -> int: ...

    @matches.setter
    def matches(self, arg: int, /) -> None: ...

    @property
    def matchesIDs(self) -> list[int]: ...

    @matchesIDs.setter
    def matchesIDs(self, arg: Sequence[int], /) -> None: ...

    @property
    def projectedIDs(self) -> list[int]: ...

    @projectedIDs.setter
    def projectedIDs(self, arg: Sequence[int], /) -> None: ...

    @property
    def inliersPerCam(self) -> list[int]: ...

    @inliersPerCam.setter
    def inliersPerCam(self, arg: Sequence[int], /) -> None: ...

    @property
    def matchesPerCam(self) -> list[int]: ...

    @matchesPerCam.setter
    def matchesPerCam(self, arg: Sequence[int], /) -> None: ...

    @property
    def icpInliersRatio(self) -> float: ...

    @icpInliersRatio.setter
    def icpInliersRatio(self, arg: float, /) -> None: ...

    @property
    def icpTranslation(self) -> float: ...

    @icpTranslation.setter
    def icpTranslation(self, arg: float, /) -> None: ...

    @property
    def icpRotation(self) -> float: ...

    @icpRotation.setter
    def icpRotation(self, arg: float, /) -> None: ...

    @property
    def icpStructuralComplexity(self) -> float: ...

    @icpStructuralComplexity.setter
    def icpStructuralComplexity(self, arg: float, /) -> None: ...

    @property
    def icpStructuralDistribution(self) -> float: ...

    @icpStructuralDistribution.setter
    def icpStructuralDistribution(self, arg: float, /) -> None: ...

    @property
    def icpCorrespondences(self) -> int: ...

    @icpCorrespondences.setter
    def icpCorrespondences(self, arg: int, /) -> None: ...

    @property
    def icpRMS(self) -> float: ...

    @icpRMS.setter
    def icpRMS(self, arg: float, /) -> None: ...

class SensorData:
    @overload
    def __init__(self) -> None: ...

    @overload
    def __init__(self, arg0: numpy.array, arg1: int, arg2: float, /) -> None: ...

    @overload
    def __init__(self, arg0: numpy.array, arg1: CameraModel, arg2: int, arg3: float, /) -> None: ...

    @overload
    def __init__(self, arg0: numpy.array, arg1: numpy.array, arg2: CameraModel, arg3: int, arg4: float, /) -> None: ...

    @overload
    def __init__(self, arg0: LaserScan, arg1: numpy.array, arg2: numpy.array, arg3: CameraModel, arg4: int, arg5: float, /) -> None: ...

    @overload
    def __init__(self, arg0: LaserScan, arg1: numpy.array, arg2: numpy.array, arg3: numpy.array, arg4: CameraModel, arg5: int, arg6: float, /) -> None: ...

    @overload
    def __init__(self, arg0: numpy.array, arg1: numpy.array, arg2: Sequence[CameraModel], arg3: int, arg4: float, /) -> None: ...

    @overload
    def __init__(self, arg0: numpy.array, arg1: numpy.array, arg2: numpy.array, arg3: Sequence[CameraModel], arg4: int, arg5: float, /) -> None: ...

    @overload
    def __init__(self, arg0: LaserScan, arg1: numpy.array, arg2: numpy.array, arg3: Sequence[CameraModel], arg4: int, arg5: float, /) -> None: ...

    @overload
    def __init__(self, arg0: LaserScan, arg1: numpy.array, arg2: numpy.array, arg3: numpy.array, arg4: Sequence[CameraModel], arg5: int, arg6: float, /) -> None: ...

    @overload
    def __init__(self, arg0: numpy.array, arg1: numpy.array, arg2: StereoCameraModel, arg3: int, arg4: float, /) -> None: ...

    @overload
    def __init__(self, arg0: LaserScan, arg1: numpy.array, arg2: numpy.array, arg3: StereoCameraModel, arg4: int, arg5: float, /) -> None: ...

    @overload
    def __init__(self, arg0: numpy.array, arg1: numpy.array, arg2: Sequence[StereoCameraModel], arg3: int, arg4: float, /) -> None: ...

    @overload
    def __init__(self, arg0: LaserScan, arg1: numpy.array, arg2: numpy.array, arg3: Sequence[StereoCameraModel], arg4: int, arg5: float, /) -> None: ...

    @overload
    def __init__(self, arg0: IMU, arg1: int, arg2: float, /) -> None: ...

    def isValid(self) -> bool: ...

    def id(self) -> int: ...

    def setId(self, arg: int, /) -> None: ...

    def stamp(self) -> float: ...

    def setStamp(self, arg: float, /) -> None: ...

    def imageCompressed(self) -> numpy.array: ...

    def depthOrRightCompressed(self) -> numpy.array: ...

    def depthConfidenceCompressed(self) -> numpy.array: ...

    def laserScanCompressed(self) -> LaserScan: ...

    def imageRaw(self) -> numpy.array: ...

    def depthOrRightRaw(self) -> numpy.array: ...

    def depthConfidenceRaw(self) -> numpy.array: ...

    def laserScanRaw(self) -> LaserScan: ...

    @overload
    def setRGBDImage(self, arg0: numpy.array, arg1: numpy.array, arg2: CameraModel, arg3: bool, /) -> None: ...

    @overload
    def setRGBDImage(self, arg0: numpy.array, arg1: numpy.array, arg2: CameraModel, arg3: bool, /) -> None: ...

    @overload
    def setRGBDImage(self, arg0: numpy.array, arg1: numpy.array, arg2: numpy.array, arg3: CameraModel, arg4: bool, /) -> None: ...

    @overload
    def setRGBDImage(self, arg0: numpy.array, arg1: numpy.array, arg2: Sequence[CameraModel], arg3: bool, /) -> None: ...

    @overload
    def setStereoImage(self, arg0: numpy.array, arg1: numpy.array, arg2: StereoCameraModel, arg3: bool, /) -> None: ...

    @overload
    def setStereoImage(self, arg0: numpy.array, arg1: numpy.array, arg2: Sequence[StereoCameraModel], arg3: bool, /) -> None: ...

    def setLaserScan(self, arg0: LaserScan, arg1: bool, /) -> None: ...

    def setCameraModel(self, arg: CameraModel, /) -> None: ...

    def setCameraModels(self, arg: Sequence[CameraModel], /) -> None: ...

    def setStereoCameraModel(self, arg: StereoCameraModel, /) -> None: ...

    def setStereoCameraModels(self, arg: Sequence[StereoCameraModel], /) -> None: ...

    def depthRaw(self) -> numpy.array: ...

    def rightRaw(self) -> numpy.array: ...

    def uncompressData(self) -> None: ...

    def cameraModels(self) -> list[CameraModel]: ...

    def stereoCameraModels(self) -> list[StereoCameraModel]: ...

    def setUserData(self, arg0: numpy.array, arg1: bool, /) -> None: ...

    def userDataRaw(self) -> numpy.array: ...

    def userDataCompressed(self) -> numpy.array: ...

    def setOccupancyGrid(self, arg0: numpy.array, arg1: numpy.array, arg2: numpy.array, arg3: float, arg4: tuple, /) -> None: ...

    def clearOccupancyGridRaw(self) -> None: ...

    def gridGroundCellsRaw(self) -> numpy.array: ...

    def gridGroundCellsCompressed(self) -> numpy.array: ...

    def gridObstacleCellsRaw(self) -> numpy.array: ...

    def gridObstacleCellsCompressed(self) -> numpy.array: ...

    def gridEmptyCellsRaw(self) -> numpy.array: ...

    def gridEmptyCellsCompressed(self) -> numpy.array: ...

    def gridCellSize(self) -> float: ...

    def gridViewPoint(self) -> tuple: ...

    def setFeatures(self, arg0: Sequence["cv::KeyPoint"], arg1: Sequence[tuple], arg2: numpy.array, /) -> None: ...

    def keypoints(self) -> list["cv::KeyPoint"]: ...

    def keypoints3D(self) -> list[tuple]: ...

    def descriptors(self) -> numpy.array: ...

    def addGlobalDescriptor(self, arg: GlobalDescriptor, /) -> None: ...

    def setGlobalDescriptors(self, arg: Sequence[GlobalDescriptor], /) -> None: ...

    def clearGlobalDescriptors(self) -> None: ...

    def globalDescriptors(self) -> list[GlobalDescriptor]: ...

    def setGroundTruth(self, arg: Transform, /) -> None: ...

    def groundTruth(self) -> Transform: ...

    def setGlobalPose(self, arg0: Transform, arg1: numpy.array, /) -> None: ...

    def globalPose(self) -> Transform: ...

    def globalPoseCovariance(self) -> numpy.array: ...

    def setGPS(self, arg: GPS, /) -> None: ...

    def gps(self) -> GPS: ...

    def setIMU(self, arg: IMU, /) -> None: ...

    def imu(self) -> IMU: ...

    def setEnvSensors(self, arg: Mapping[EnvSensorType, EnvSensor], /) -> None: ...

    def addEnvSensor(self, arg: EnvSensor, /) -> None: ...

    @overload
    def envSensors(self) -> dict[EnvSensorType, EnvSensor]: ...

    @overload
    def envSensors(self) -> dict[EnvSensorType, EnvSensor]: ...

    def setLandmarks(self, arg: Mapping[int, Landmark], /) -> None: ...

    def landmarks(self) -> dict[int, Landmark]: ...

    def getMemoryUsed(self) -> int: ...

    def clearCompressedData(self, arg0: bool, arg1: bool, arg2: bool, /) -> None: ...

    def clearRawData(self, arg0: bool, arg1: bool, arg2: bool, /) -> None: ...

    def isPointVisibleFromCameras(self, arg: tuple, /) -> bool: ...

class StereoCameraModel:
    @overload
    def __init__(self) -> None: ...

    @overload
    def __init__(self, name: str, imageSize1: tuple, K1: numpy.array, D1: numpy.array, R1: numpy.array, P1: numpy.array, imageSize2: tuple, K2: numpy.array, D2: numpy.array, R2: numpy.array, P2: numpy.array, R: numpy.array, T: numpy.array, E: numpy.array, F: numpy.array) -> None: ...

    @overload
    def __init__(self, name: str, leftCameraModel: CameraModel, rightCameraModel: CameraModel) -> None: ...

    @overload
    def __init__(self, name: str, leftCameraModel: CameraModel, rightCameraModel: CameraModel, extrinsics: Transform) -> None: ...

    @overload
    def __init__(self, fx: float, fy: float, cx: float, cy: float, baseline: float) -> None: ...

    @overload
    def __init__(self, name: str, fx: float, fy: float, cx: float, cy: float, baseline: float) -> None: ...

    def isValidForProjection(self) -> bool: ...

    def isValidForRectification(self) -> bool: ...

    def initRectificationMap(self) -> None: ...

    def isRectificationMapInitialized(self) -> bool: ...

    def setName(self, arg0: str, arg1: str, arg2: str, /) -> None: ...

    def name(self) -> str: ...

    def setImageSize(self, arg: tuple, /) -> None: ...

    def load(self, arg0: str, arg1: str, arg2: bool, /) -> bool: ...

    def save(self, arg0: str, arg1: bool, /) -> bool: ...

    def saveStereoTransform(self, arg: str, /) -> bool: ...

    def serialize(self) -> list[int]: ...

    def deserialize(self, arg: Sequence[int], /) -> int: ...

    def baseline(self) -> float: ...

    def computeDepth(self, arg: float, /) -> float: ...

    @overload
    def computeDisparity(self, arg: float, /) -> float: ...

    @overload
    def computeDisparity(self, arg: int, /) -> float: ...

    def R(self) -> numpy.array: ...

    def T(self) -> numpy.array: ...

    def E(self) -> numpy.array: ...

    def F(self) -> numpy.array: ...

    def scale(self, arg: float, /) -> None: ...

    def roi(self, arg: tuple, /) -> None: ...

    def setLocalTransform(self, arg: Transform, /) -> None: ...

    def localTransform(self) -> Transform: ...

    def stereoTransform(self) -> Transform: ...

    def left(self) -> CameraModel: ...

    def right(self) -> CameraModel: ...

    def getLeftSuffix(self) -> str: ...

    def getRightSuffix(self) -> str: ...

class Transform:
    @overload
    def __init__(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float, arg10: float, arg11: float, /) -> None: ...

    @overload
    def __init__(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, /) -> None: ...

    @overload
    def __init__(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, /) -> None: ...

    @overload
    def __init__(self, arg0: float, arg1: float, arg2: float, /) -> None: ...

    def clone(self) -> Transform: ...

    def r11(self) -> float: ...

    def r12(self) -> float: ...

    def r13(self) -> float: ...

    def r21(self) -> float: ...

    def r22(self) -> float: ...

    def r23(self) -> float: ...

    def r31(self) -> float: ...

    def r32(self) -> float: ...

    def r33(self) -> float: ...

    def o14(self) -> float: ...

    def o24(self) -> float: ...

    def o34(self) -> float: ...

    def isNull(self) -> bool: ...

    def isIdentity(self) -> bool: ...

    def size(self) -> int: ...

    def theta(self) -> float: ...

    def isInvertible(self) -> bool: ...

    def inverse(self) -> Transform: ...

    def rotation(self) -> Transform: ...

    def translation(self) -> Transform: ...

    def to3DoF(self) -> Transform: ...

    def to4DoF(self) -> Transform: ...

    def is3DoF(self) -> bool: ...

    def is4DoF(self) -> bool: ...

    def rotationMatrix(self) -> numpy.array: ...

    def translationMatrix(self) -> numpy.array: ...

    def getTranslationAndEulerAngles(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, /) -> None: ...

    def getEulerAngles(self, arg0: float, arg1: float, arg2: float, /) -> None: ...

    def getTranslation(self, arg0: float, arg1: float, arg2: float, /) -> None: ...

    def getAngle(self, arg: Transform, /) -> float: ...

    def getNorm(self) -> float: ...

    def getNormSquared(self) -> float: ...

    def getDistance(self, arg: Transform, /) -> float: ...

    def getDistanceSquared(self, arg: Transform, /) -> float: ...

    def interpolate(self, arg0: float, arg1: Transform, /) -> Transform: ...

    def normalizeRotation(self) -> None: ...

    def prettyPrint(self) -> str: ...

    def toEigen4f(self) -> "Eigen::Matrix<float, 4, 4, 0, 4, 4>": ...

    def toEigen4d(self) -> "Eigen::Matrix<double, 4, 4, 0, 4, 4>": ...

    def toEigen3f(self) -> "Eigen::Transform<float, 3, 2, 0>": ...

    def toEigen3d(self) -> "Eigen::Transform<double, 3, 2, 0>": ...

    def getQuaternionf(self) -> "Eigen::Quaternion<float, 0>": ...

    def getQuaterniond(self) -> "Eigen::Quaternion<double, 0>": ...

    @staticmethod
    def getIdentity() -> Transform: ...

    @staticmethod
    def fromEigen4f(arg: "Eigen::Matrix<float, 4, 4, 0, 4, 4>", /) -> Transform: ...

    @staticmethod
    def fromEigen4d(arg: "Eigen::Matrix<double, 4, 4, 0, 4, 4>", /) -> Transform: ...

    @staticmethod
    def opengl_T_rtabmap() -> Transform: ...

    @staticmethod
    def rtabmap_T_opengl() -> Transform: ...

    @staticmethod
    def fromString(arg: str, /) -> Transform: ...

    @staticmethod
    def canParseString(arg: str, /) -> bool: ...

    @staticmethod
    def getTransform(arg0: Mapping[float, Transform], arg1: float, /) -> Transform: ...

def add(a: int, b: int) -> int: ...
